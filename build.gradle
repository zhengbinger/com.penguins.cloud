configure(allprojects) { project ->
    group 'com.penguins.cloud'
    version '0.0.1-SNAPSHOT'
    apply plugin: 'java'
}
// 设定子模块项目中的配置
configure(subprojects) { subprojects ->

    // 此处主要为了过滤容器模块中的插件配置，容器模块的主要用来管理下属部分的模块，无需添加依赖和插件
    apply plugin: 'java'
    apply plugin: 'idea'

    //jdk版本
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

//    apply from: "${rootDir}/dependency.gradle"

    repositories {
        mavenLocal()
        maven {
            allowInsecureProtocol = true
            url 'http://maven.aliyun.com/nexus/content/groups/public/'
        }
        mavenCentral()
    }

    //spring boot 插件
    apply plugin: 'org.springframework.boot'
    //A Gradle plugin that provides Maven-like dependency management functionality
    apply plugin: 'io.spring.dependency-management'
    // 项目中所使用到的依赖，这里添加的依赖会被所有项目，包括root项目继承
    dependencies {
        implementation "org.slf4j:slf4j-api:1.7.16"
        // lombok
//        annotationProcessor 'org.projectlombok:lombok:1.18.20'
//        compileOnly 'org.projectlombok:lombok:1.18.20'
//        testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'
//        testCompileOnly 'org.projectlombok:lombok:1.18.20'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-devtools'
        implementation 'org.springframework.boot:spring-boot-maven-plugin:2.4.3'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'

        implementation 'io.springfox:springfox-swagger2:3.0.0'
        implementation 'com.github.xiaoymin:swagger-bootstrap-ui:1.9.6'
    }
    dependencyManagement {
        imports {
            // spring bom helps us to declare dependencies without specifying version numbers.
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:${alibabaCloudVersion}"
        }
    }
}

// 声明gradle脚本自身需要使用的资源
buildscript {
    // repositories 为什么要要声明两次
    // buildscript 中的声明是 gradle 脚本自身需要使用的资源。可以声明的资源包括依赖项、第三方插件、maven 仓库地址等。
    // 而在 build.gradle 文件中直接声明的依赖项、仓库地址等信息是项目自身需要的资源。
    repositories {
        mavenLocal()
        maven {
            allowInsecureProtocol = true
            url "http://maven.aliyun.com/nexus/content/groups/public/"
        }
        mavenCentral()
    }

    ext {
        springbootVersion = '2.5.3'
        springCloudVersion = '2020.0.3'
        alibabaCloudVersion = '2021.1'
    }

    dependencies {
        // spring-boot 插件
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springbootVersion")
//        classpath('com.bmuschko:gradle-docker-plugin:6.7.0')
    }
}